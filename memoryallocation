#include <stdio.h>

#define MAX_PARTITIONS 100

void firstFit(int partitions[], int numPartitions, int processSize) {
    int allocation[MAX_PARTITIONS];
    for (int i = 0; i < numPartitions; i++) {
        allocation[i] = -1; // Initialize all partitions as unallocated
    }

    for (int i = 0; i < numPartitions; i++) {
        for (int j = 0; j < numPartitions; j++) {
            if (partitions[j] >= processSize) {
                allocation[j] = i;
                partitions[j] -= processSize;
                break;
            }
        }
    }

    printf("\nPartition\tProcess\n");
    for (int i = 0; i < numPartitions; i++) {
        printf("%d\t\t", i+1);
        if (allocation[i] != -1) {
            printf("%d\n", allocation[i] + 1);
        } else {
            printf("Not Allocated\n");
        }
    }
}

void worstFit(int partitions[], int numPartitions, int processSize) {
    int allocation[MAX_PARTITIONS];
    for (int i = 0; i < numPartitions; i++) {
        allocation[i] = -1; // Initialize all partitions as unallocated
    }

    for (int i = 0; i < numPartitions; i++) {
        int worstIdx = -1;
        for (int j = 0; j < numPartitions; j++) {
            if (partitions[j] >= processSize) {
                if (worstIdx == -1 || partitions[j] > partitions[worstIdx]) {
                    worstIdx = j;
                }
            }
        }

        if (worstIdx != -1) {
            allocation[worstIdx] = i;
            partitions[worstIdx] -= processSize;
        }
    }

    printf("\nPartition\tProcess\n");
    for (int i = 0; i < numPartitions; i++) {
        printf("%d\t\t", i+1);
        if (allocation[i] != -1) {
            printf("%d\n", allocation[i] + 1);
        } else {
            printf("Not Allocated\n");
        }
    }
}

void bestFit(int partitions[], int numPartitions, int processSize) {
    int allocation[MAX_PARTITIONS];
    for (int i = 0; i < numPartitions; i++) {
        allocation[i] = -1; // Initialize all partitions as unallocated
    }

    for (int i = 0; i < numPartitions; i++) {
        int bestIdx = -1;
        for (int j = 0; j < numPartitions; j++) {
            if (partitions[j] >= processSize) {
                if (bestIdx == -1 || partitions[j] < partitions[bestIdx]) {
                    bestIdx = j;
                }
            }
        }

        if (bestIdx != -1) {
            allocation[bestIdx] = i;
            partitions[bestIdx] -= processSize;
        }
    }

    printf("\nPartition\tProcess\n");
    for (int i = 0; i < numPartitions; i++) {
        printf("%d\t\t", i+1);
        if (allocation[i] != -1) {
            printf("%d\n", allocation[i] + 1);
        } else {
            printf("Not Allocated\n");
        }
    }
}

int main() {
    int numPartitions, partitions[MAX_PARTITIONS], processSize;

    printf("Enter the number of partitions: ");
    scanf("%d", &numPartitions);

    printf("Enter the sizes of partitions:\n");
    for (int i = 0; i < numPartitions; i++) {
        printf("Partition %d: ", i + 1);
        scanf("%d", &partitions[i]);
    }

    printf("Enter the size of the process: ");
    scanf("%d", &processSize);

    printf("\nFirst Fit:\n");
    firstFit(partitions, numPartitions, processSize);

    printf("\nWorst Fit:\n");
    worstFit(partitions, numPartitions, processSize);

    printf("\nBest Fit:\n");
    bestFit(partitions, numPartitions, processSize);

    return 0;
}
